#define NUM_LEDS_PER_STRIP 300
#define NUM_STRIPS 1
#define NUM_LEDS NUM_STRIPS*NUM_LEDS_PER_STRIP
CRGB leds[NUM_LEDS];

void startLEDs() {
    //pins 12, 13, 14 and 15 (or pins 6,7,5 and 8 on the NodeMCU boards/pin layout).
    FastLED.addLeds<WS2812B_PORTA, NUM_STRIPS>(leds, NUM_LEDS_PER_STRIP);
}

struct PulsePrimaryData {
    byte red;
    byte green;
    byte blue;
};

struct RandomData {
    byte temp;
};


struct DotData {
    uint16_t led;
    CRGB color;
};

struct HSVRotateData {
    byte h;
//    byte s; This justcontrolls whiteness. Stupid.
    byte v; //Controlls how bright it is.
    byte other;
};
/*
 * Instructions to make a new mode.
 * Add the string in the LEDOptions array.
 * Add the start code in the "startSelected Method"
 */
union Data {
    PulsePrimaryData pp;
    RandomData r;
    DotData d;
    HSVRotateData h;
} d;

//Called at REFRESH RATE per second
void runLEDs() {
    
    switch (selected) {
        case 0: //RGB Rotate
            d.pp.red++;
            d.pp.blue++;
            d.pp.green++;
            setAll(CRGB(sin8(d.pp.red), sin8(d.pp.green), sin8(d.pp.blue)));
            break;
        case 1://Switch
            break;
        case 2:
            break;
        case 3: //Dot
            leds[d.d.led] = CRGB::Black;
            d.d.led++;
            if (d.d.led == NUM_LEDS) d.d.led = 0;
            leds[d.d.led] = CRGB::Red;
            break;
        case 4://HSV Rotate
            //We need the h to rotate a little shower.
            d.h.h++;
            if(d.h.other == 10) { //every third, we increment the brightness. This is run through sin function to pulse.
                d.h.other = 0;
                d.h.v++;
            }
            d.h.other++;
            setAll(CHSV(d.h.h, 255, 10 + (float) sin8(d.h.v) * ((245.0/255.0)));
            break;
    }
    FastLED.show();
}

void startSelected() {
    memset(&d, 0, sizeof(d));
    switch (selected) {
        case 0: //Pulse Primary
            d.pp.red   = (float) 256 * ((float) 0 / 3);
            d.pp.blue  = (float) 256 * ((float) 1 / 3);
            d.pp.green = (float) 256 * ((float) 2 / 3);
            break;
        case 1:
            break;
        case 2: //Dot
            clearLEDs();
            d.d.color = CRGB::Red;
            break;
        case 3:
            break;
        case 4:
            break;
    }
}

void clearLEDs() {
    memset(leds, 0, sizeof(CRGB)*NUM_LEDS);
}

void setAll(CRGB color) {
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        leds[i] = color;
    }
}
